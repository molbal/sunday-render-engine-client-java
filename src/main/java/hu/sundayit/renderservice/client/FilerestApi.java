/**
 * Sunday Render Service
 * Sunday Render Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package hu.sundayit.renderservice.client;

import hu.sundayit.renderservice.client.ApiCallback;
import hu.sundayit.renderservice.client.ApiClient;
import hu.sundayit.renderservice.client.ApiException;
import hu.sundayit.renderservice.client.ApiResponse;
import hu.sundayit.renderservice.client.Configuration;
import hu.sundayit.renderservice.client.Pair;
import hu.sundayit.renderservice.client.ProgressRequestBody;
import hu.sundayit.renderservice.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import hu.sundayit.renderservice.models.FileEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FilerestApi {
    private ApiClient apiClient;

    public FilerestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FilerestApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for createFileEntityUsingPOST */
    private com.squareup.okhttp.Call createFileEntityUsingPOSTCall(FileEntity fileToCreate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileToCreate;
        
        // verify the required parameter 'fileToCreate' is set
        if (fileToCreate == null) {
            throw new ApiException("Missing the required parameter 'fileToCreate' when calling createFileEntityUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/file/create".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Creates a file
     * 
     * @param fileToCreate fileToCreate (required)
     * @return FileEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileEntity createFileEntityUsingPOST(FileEntity fileToCreate) throws ApiException {
        ApiResponse<FileEntity> resp = createFileEntityUsingPOSTWithHttpInfo(fileToCreate);
        return resp.getData();
    }

    /**
     * Creates a file
     * 
     * @param fileToCreate fileToCreate (required)
     * @return ApiResponse&lt;FileEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileEntity> createFileEntityUsingPOSTWithHttpInfo(FileEntity fileToCreate) throws ApiException {
        com.squareup.okhttp.Call call = createFileEntityUsingPOSTCall(fileToCreate, null, null);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Creates a file (asynchronously)
     * 
     * @param fileToCreate fileToCreate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call createFileEntityUsingPOSTAsync(FileEntity fileToCreate, final ApiCallback<FileEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = createFileEntityUsingPOSTCall(fileToCreate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFileEntityUsingGET */
    private com.squareup.okhttp.Call getFileEntityUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFileEntityUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/file/get/{Id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets a file eneity, its metadata read from the database and its contents read from the file storage
     * 
     * @param id Id (required)
     * @return FileEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileEntity getFileEntityUsingGET(Long id) throws ApiException {
        ApiResponse<FileEntity> resp = getFileEntityUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Gets a file eneity, its metadata read from the database and its contents read from the file storage
     * 
     * @param id Id (required)
     * @return ApiResponse&lt;FileEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileEntity> getFileEntityUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getFileEntityUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a file eneity, its metadata read from the database and its contents read from the file storage (asynchronously)
     * 
     * @param id Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFileEntityUsingGETAsync(Long id, final ApiCallback<FileEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFileEntityUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getFilesByProjectIdUsingGET */
    private com.squareup.okhttp.Call getFilesByProjectIdUsingGETCall(Long projectId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling getFilesByProjectIdUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/file/getbyproject/{projectId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectId" + "\\}", apiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Gets all file entities by a project. Note, that this operation only queries the database, and not the file contents.
     * 
     * @param projectId projectId (required)
     * @return List&lt;FileEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<FileEntity> getFilesByProjectIdUsingGET(Long projectId) throws ApiException {
        ApiResponse<List<FileEntity>> resp = getFilesByProjectIdUsingGETWithHttpInfo(projectId);
        return resp.getData();
    }

    /**
     * Gets all file entities by a project. Note, that this operation only queries the database, and not the file contents.
     * 
     * @param projectId projectId (required)
     * @return ApiResponse&lt;List&lt;FileEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<FileEntity>> getFilesByProjectIdUsingGETWithHttpInfo(Long projectId) throws ApiException {
        com.squareup.okhttp.Call call = getFilesByProjectIdUsingGETCall(projectId, null, null);
        Type localVarReturnType = new TypeToken<List<FileEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets all file entities by a project. Note, that this operation only queries the database, and not the file contents. (asynchronously)
     * 
     * @param projectId projectId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getFilesByProjectIdUsingGETAsync(Long projectId, final ApiCallback<List<FileEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getFilesByProjectIdUsingGETCall(projectId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<FileEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateFileContentsUsingPOST */
    private com.squareup.okhttp.Call updateFileContentsUsingPOSTCall(FileEntity fileToUpdate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = fileToUpdate;
        
        // verify the required parameter 'fileToUpdate' is set
        if (fileToUpdate == null) {
            throw new ApiException("Missing the required parameter 'fileToUpdate' when calling updateFileContentsUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/file/update".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates a file
     * 
     * @param fileToUpdate fileToUpdate (required)
     * @return FileEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FileEntity updateFileContentsUsingPOST(FileEntity fileToUpdate) throws ApiException {
        ApiResponse<FileEntity> resp = updateFileContentsUsingPOSTWithHttpInfo(fileToUpdate);
        return resp.getData();
    }

    /**
     * Updates a file
     * 
     * @param fileToUpdate fileToUpdate (required)
     * @return ApiResponse&lt;FileEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FileEntity> updateFileContentsUsingPOSTWithHttpInfo(FileEntity fileToUpdate) throws ApiException {
        com.squareup.okhttp.Call call = updateFileContentsUsingPOSTCall(fileToUpdate, null, null);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates a file (asynchronously)
     * 
     * @param fileToUpdate fileToUpdate (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateFileContentsUsingPOSTAsync(FileEntity fileToUpdate, final ApiCallback<FileEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateFileContentsUsingPOSTCall(fileToUpdate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FileEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
