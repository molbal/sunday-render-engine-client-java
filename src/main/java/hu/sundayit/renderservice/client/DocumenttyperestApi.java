/**
 * Sunday Render Service
 * Sunday Render Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package hu.sundayit.renderservice.client;

import hu.sundayit.renderservice.client.ApiCallback;
import hu.sundayit.renderservice.client.ApiClient;
import hu.sundayit.renderservice.client.ApiException;
import hu.sundayit.renderservice.client.ApiResponse;
import hu.sundayit.renderservice.client.Configuration;
import hu.sundayit.renderservice.client.Pair;
import hu.sundayit.renderservice.client.ProgressRequestBody;
import hu.sundayit.renderservice.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;

import hu.sundayit.renderservice.models.DocumentTypeEntity;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DocumenttyperestApi {
    private ApiClient apiClient;

    public DocumenttyperestApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DocumenttyperestApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for deleteDocumentTypeUsingDELETE */
    private com.squareup.okhttp.Call deleteDocumentTypeUsingDELETECall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDocumentTypeUsingDELETE(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/document_type/delete/{Id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Deletes a document type
     * 
     * @param id Id (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteDocumentTypeUsingDELETE(Long id) throws ApiException {
        deleteDocumentTypeUsingDELETEWithHttpInfo(id);
    }

    /**
     * Deletes a document type
     * 
     * @param id Id (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteDocumentTypeUsingDELETEWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = deleteDocumentTypeUsingDELETECall(id, null, null);
        return apiClient.execute(call);
    }

    /**
     * Deletes a document type (asynchronously)
     * 
     * @param id Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteDocumentTypeUsingDELETEAsync(Long id, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteDocumentTypeUsingDELETECall(id, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for getDocumentTypeByIdUsingGET */
    private com.squareup.okhttp.Call getDocumentTypeByIdUsingGETCall(Long id, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDocumentTypeByIdUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/document_type/{Id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns the document type entity by the ID
     * 
     * @param id Id (required)
     * @return DocumentTypeEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentTypeEntity getDocumentTypeByIdUsingGET(Long id) throws ApiException {
        ApiResponse<DocumentTypeEntity> resp = getDocumentTypeByIdUsingGETWithHttpInfo(id);
        return resp.getData();
    }

    /**
     * Returns the document type entity by the ID
     * 
     * @param id Id (required)
     * @return ApiResponse&lt;DocumentTypeEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentTypeEntity> getDocumentTypeByIdUsingGETWithHttpInfo(Long id) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTypeByIdUsingGETCall(id, null, null);
        Type localVarReturnType = new TypeToken<DocumentTypeEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns the document type entity by the ID (asynchronously)
     * 
     * @param id Id (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTypeByIdUsingGETAsync(Long id, final ApiCallback<DocumentTypeEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTypeByIdUsingGETCall(id, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentTypeEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for getDocumentTypesByProjectIdUsingGET */
    private com.squareup.okhttp.Call getDocumentTypesByProjectIdUsingGETCall(Long projectEntityId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // verify the required parameter 'projectEntityId' is set
        if (projectEntityId == null) {
            throw new ApiException("Missing the required parameter 'projectEntityId' when calling getDocumentTypesByProjectIdUsingGET(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/document_type/project_id/{projectEntityId}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "projectEntityId" + "\\}", apiClient.escapeString(projectEntityId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*_/_*", "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Returns a list of document type entities by their project id
     * 
     * @param projectEntityId projectEntityId (required)
     * @return List&lt;DocumentTypeEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<DocumentTypeEntity> getDocumentTypesByProjectIdUsingGET(Long projectEntityId) throws ApiException {
        ApiResponse<List<DocumentTypeEntity>> resp = getDocumentTypesByProjectIdUsingGETWithHttpInfo(projectEntityId);
        return resp.getData();
    }

    /**
     * Returns a list of document type entities by their project id
     * 
     * @param projectEntityId projectEntityId (required)
     * @return ApiResponse&lt;List&lt;DocumentTypeEntity&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<DocumentTypeEntity>> getDocumentTypesByProjectIdUsingGETWithHttpInfo(Long projectEntityId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentTypesByProjectIdUsingGETCall(projectEntityId, null, null);
        Type localVarReturnType = new TypeToken<List<DocumentTypeEntity>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Returns a list of document type entities by their project id (asynchronously)
     * 
     * @param projectEntityId projectEntityId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentTypesByProjectIdUsingGETAsync(Long projectEntityId, final ApiCallback<List<DocumentTypeEntity>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentTypesByProjectIdUsingGETCall(projectEntityId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<DocumentTypeEntity>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for insertDocumentTypeUsingPOST */
    private com.squareup.okhttp.Call insertDocumentTypeUsingPOSTCall(DocumentTypeEntity documentTypeEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentTypeEntity;
        
        // verify the required parameter 'documentTypeEntity' is set
        if (documentTypeEntity == null) {
            throw new ApiException("Missing the required parameter 'documentTypeEntity' when calling insertDocumentTypeUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/document_type/create".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * insertDocumentType
     * 
     * @param documentTypeEntity documentTypeEntity (required)
     * @return DocumentTypeEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentTypeEntity insertDocumentTypeUsingPOST(DocumentTypeEntity documentTypeEntity) throws ApiException {
        ApiResponse<DocumentTypeEntity> resp = insertDocumentTypeUsingPOSTWithHttpInfo(documentTypeEntity);
        return resp.getData();
    }

    /**
     * insertDocumentType
     * 
     * @param documentTypeEntity documentTypeEntity (required)
     * @return ApiResponse&lt;DocumentTypeEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentTypeEntity> insertDocumentTypeUsingPOSTWithHttpInfo(DocumentTypeEntity documentTypeEntity) throws ApiException {
        com.squareup.okhttp.Call call = insertDocumentTypeUsingPOSTCall(documentTypeEntity, null, null);
        Type localVarReturnType = new TypeToken<DocumentTypeEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * insertDocumentType (asynchronously)
     * 
     * @param documentTypeEntity documentTypeEntity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call insertDocumentTypeUsingPOSTAsync(DocumentTypeEntity documentTypeEntity, final ApiCallback<DocumentTypeEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = insertDocumentTypeUsingPOSTCall(documentTypeEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentTypeEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for updateDocumentTypeUsingPOST */
    private com.squareup.okhttp.Call updateDocumentTypeUsingPOSTCall(Long id, DocumentTypeEntity documentTypeEntity, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentTypeEntity;
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDocumentTypeUsingPOST(Async)");
        }
        
        // verify the required parameter 'documentTypeEntity' is set
        if (documentTypeEntity == null) {
            throw new ApiException("Missing the required parameter 'documentTypeEntity' when calling updateDocumentTypeUsingPOST(Async)");
        }
        

        // create path and map variables
        String localVarPath = "/document_type/update/{Id}".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    /**
     * Updates an existing document type
     * 
     * @param id Id (required)
     * @param documentTypeEntity documentTypeEntity (required)
     * @return DocumentTypeEntity
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentTypeEntity updateDocumentTypeUsingPOST(Long id, DocumentTypeEntity documentTypeEntity) throws ApiException {
        ApiResponse<DocumentTypeEntity> resp = updateDocumentTypeUsingPOSTWithHttpInfo(id, documentTypeEntity);
        return resp.getData();
    }

    /**
     * Updates an existing document type
     * 
     * @param id Id (required)
     * @param documentTypeEntity documentTypeEntity (required)
     * @return ApiResponse&lt;DocumentTypeEntity&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentTypeEntity> updateDocumentTypeUsingPOSTWithHttpInfo(Long id, DocumentTypeEntity documentTypeEntity) throws ApiException {
        com.squareup.okhttp.Call call = updateDocumentTypeUsingPOSTCall(id, documentTypeEntity, null, null);
        Type localVarReturnType = new TypeToken<DocumentTypeEntity>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Updates an existing document type (asynchronously)
     * 
     * @param id Id (required)
     * @param documentTypeEntity documentTypeEntity (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call updateDocumentTypeUsingPOSTAsync(Long id, DocumentTypeEntity documentTypeEntity, final ApiCallback<DocumentTypeEntity> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = updateDocumentTypeUsingPOSTCall(id, documentTypeEntity, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentTypeEntity>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
