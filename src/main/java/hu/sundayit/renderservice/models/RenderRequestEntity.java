/**
 * Sunday Render Service
 * Sunday Render Service
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * Contact: molnar.balint@mdy.hu
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package hu.sundayit.renderservice.models;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * RenderRequestEntity
 */

public class RenderRequestEntity   {
  @SerializedName("documentTypeId")
  private Long documentTypeId = null;

  @SerializedName("extraEngineParameters")
  private String extraEngineParameters = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("keywords")
  private Map<String, String> keywords = new HashMap<String, String>();

  @SerializedName("projectId")
  private Long projectId = null;

  @SerializedName("renderFinished")
  private OffsetDateTime renderFinished = null;

  @SerializedName("renderRequested")
  private OffsetDateTime renderRequested = null;

  /**
   * Render target.
   */
  public enum RenderTargetEnum {
    @SerializedName("PDF")
    PDF("PDF"),
    
    @SerializedName("EMBEDDED_HTML")
    EMBEDDED_HTML("EMBEDDED_HTML");

    private String value;

    RenderTargetEnum(String value) {
      this.value = value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
  }

  @SerializedName("renderTarget")
  private RenderTargetEnum renderTarget = null;

  @SerializedName("renderedBy")
  private String renderedBy = null;

  @SerializedName("renderedDuration")
  private Long renderedDuration = null;

  public RenderRequestEntity documentTypeId(Long documentTypeId) {
    this.documentTypeId = documentTypeId;
    return this;
  }

   /**
   * Document ID
   * @return documentTypeId
  **/
  @ApiModelProperty(example = "null", value = "Document ID")
  public Long getDocumentTypeId() {
    return documentTypeId;
  }

  public void setDocumentTypeId(Long documentTypeId) {
    this.documentTypeId = documentTypeId;
  }

  public RenderRequestEntity extraEngineParameters(String extraEngineParameters) {
    this.extraEngineParameters = extraEngineParameters;
    return this;
  }

   /**
   * Extra WKHTMLTOPDF engine parameters, seen here: https://wkhtmltopdf.org/usage/wkhtmltopdf.txt
   * @return extraEngineParameters
  **/
  @ApiModelProperty(example = "null", value = "Extra WKHTMLTOPDF engine parameters, seen here: https://wkhtmltopdf.org/usage/wkhtmltopdf.txt")
  public String getExtraEngineParameters() {
    return extraEngineParameters;
  }

  public void setExtraEngineParameters(String extraEngineParameters) {
    this.extraEngineParameters = extraEngineParameters;
  }

  public RenderRequestEntity id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Unique identifier. Unique amongst render requests, but not other objects.
   * @return id
  **/
  @ApiModelProperty(example = "null", value = "Unique identifier. Unique amongst render requests, but not other objects.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public RenderRequestEntity keywords(Map<String, String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public RenderRequestEntity putKeywordsItem(String key, String keywordsItem) {
    this.keywords.put(key, keywordsItem);
    return this;
  }

   /**
   * List of keyword keys and values
   * @return keywords
  **/
  @ApiModelProperty(example = "null", value = "List of keyword keys and values")
  public Map<String, String> getKeywords() {
    return keywords;
  }

  public void setKeywords(Map<String, String> keywords) {
    this.keywords = keywords;
  }

  public RenderRequestEntity projectId(Long projectId) {
    this.projectId = projectId;
    return this;
  }

   /**
   * Project ID
   * @return projectId
  **/
  @ApiModelProperty(example = "null", value = "Project ID")
  public Long getProjectId() {
    return projectId;
  }

  public void setProjectId(Long projectId) {
    this.projectId = projectId;
  }

  public RenderRequestEntity renderFinished(OffsetDateTime renderFinished) {
    this.renderFinished = renderFinished;
    return this;
  }

   /**
   * Date and time the render request was served
   * @return renderFinished
  **/
  @ApiModelProperty(example = "null", value = "Date and time the render request was served")
  public OffsetDateTime getRenderFinished() {
    return renderFinished;
  }

  public void setRenderFinished(OffsetDateTime renderFinished) {
    this.renderFinished = renderFinished;
  }

  public RenderRequestEntity renderRequested(OffsetDateTime renderRequested) {
    this.renderRequested = renderRequested;
    return this;
  }

   /**
   * Date and time the render request was received
   * @return renderRequested
  **/
  @ApiModelProperty(example = "null", value = "Date and time the render request was received")
  public OffsetDateTime getRenderRequested() {
    return renderRequested;
  }

  public void setRenderRequested(OffsetDateTime renderRequested) {
    this.renderRequested = renderRequested;
  }

  public RenderRequestEntity renderTarget(RenderTargetEnum renderTarget) {
    this.renderTarget = renderTarget;
    return this;
  }

   /**
   * Render target.
   * @return renderTarget
  **/
  @ApiModelProperty(example = "null", value = "Render target.")
  public RenderTargetEnum getRenderTarget() {
    return renderTarget;
  }

  public void setRenderTarget(RenderTargetEnum renderTarget) {
    this.renderTarget = renderTarget;
  }

  public RenderRequestEntity renderedBy(String renderedBy) {
    this.renderedBy = renderedBy;
    return this;
  }

   /**
   * Name of entity who sent the request
   * @return renderedBy
  **/
  @ApiModelProperty(example = "null", value = "Name of entity who sent the request")
  public String getRenderedBy() {
    return renderedBy;
  }

  public void setRenderedBy(String renderedBy) {
    this.renderedBy = renderedBy;
  }

  public RenderRequestEntity renderedDuration(Long renderedDuration) {
    this.renderedDuration = renderedDuration;
    return this;
  }

   /**
   * The time it took do do the rendering (including verifying and generating files, excluding waiting for free thread)
   * @return renderedDuration
  **/
  @ApiModelProperty(example = "null", value = "The time it took do do the rendering (including verifying and generating files, excluding waiting for free thread)")
  public Long getRenderedDuration() {
    return renderedDuration;
  }

  public void setRenderedDuration(Long renderedDuration) {
    this.renderedDuration = renderedDuration;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RenderRequestEntity renderRequestEntity = (RenderRequestEntity) o;
    return Objects.equals(this.documentTypeId, renderRequestEntity.documentTypeId) &&
        Objects.equals(this.extraEngineParameters, renderRequestEntity.extraEngineParameters) &&
        Objects.equals(this.id, renderRequestEntity.id) &&
        Objects.equals(this.keywords, renderRequestEntity.keywords) &&
        Objects.equals(this.projectId, renderRequestEntity.projectId) &&
        Objects.equals(this.renderFinished, renderRequestEntity.renderFinished) &&
        Objects.equals(this.renderRequested, renderRequestEntity.renderRequested) &&
        Objects.equals(this.renderTarget, renderRequestEntity.renderTarget) &&
        Objects.equals(this.renderedBy, renderRequestEntity.renderedBy) &&
        Objects.equals(this.renderedDuration, renderRequestEntity.renderedDuration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(documentTypeId, extraEngineParameters, id, keywords, projectId, renderFinished, renderRequested, renderTarget, renderedBy, renderedDuration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RenderRequestEntity {\n");
    
    sb.append("    documentTypeId: ").append(toIndentedString(documentTypeId)).append("\n");
    sb.append("    extraEngineParameters: ").append(toIndentedString(extraEngineParameters)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    renderFinished: ").append(toIndentedString(renderFinished)).append("\n");
    sb.append("    renderRequested: ").append(toIndentedString(renderRequested)).append("\n");
    sb.append("    renderTarget: ").append(toIndentedString(renderTarget)).append("\n");
    sb.append("    renderedBy: ").append(toIndentedString(renderedBy)).append("\n");
    sb.append("    renderedDuration: ").append(toIndentedString(renderedDuration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

